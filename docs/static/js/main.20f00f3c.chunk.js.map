{"version":3,"sources":["components/AddCategory.js","components/GifGridItem.js","components/helpers/getGis.js","components/GifGrid.js","components/hooks/useFetchGift.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","GifGridItem","title","url","className","src","alt","getGis","category","a","Url","encodeURI","fetch","Res","json","data","gifs","map","img","id","images","downsized_medium","GifGrid","loading","state","setState","useEffect","then","useFetchGift","key","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"6MAIaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EAIVC,mBAAS,IAJC,mBAIvCC,EAJuC,KAI3BC,EAJ2B,KAwB9C,OACI,0BAAMC,SAbY,SAACC,GAEnBA,EAAEC,iBACEJ,EAAWK,OAAOC,OAAS,IAE3BR,GAAc,SAAAS,GAAI,OAAKP,GAAL,mBAAmBO,OACrCN,EAAc,OAQd,2BACIO,KAAK,OACLC,MAAOT,EACPU,SAtBc,SAACP,GAEvBF,EAAcE,EAAEQ,OAAOF,YCTlBG,EAAa,SAAC,GAAgB,IAAfC,EAAc,EAAdA,MAAMC,EAAQ,EAARA,IAC/B,OACK,yBAAKC,UAAU,0CACb,yBAAKC,IAAKF,EAAKG,IAAOJ,IACtB,+BAAKA,K,uBCRDK,EAAM,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACbC,EADa,gDACkCC,UAAUH,GAD5C,+DAEDI,MAAMF,GAFL,cAEbG,EAFa,gBAGIA,EAAIC,OAHR,uBAGXC,EAHW,EAGXA,KAEFC,EAAOD,EAAKE,KAAI,SAAAC,GAAQ,IAAD,EACzB,MAAO,CACHC,GAAID,EAAIC,GACRjB,MAAOgB,EAAIhB,MACXC,IAAG,UAAEe,EAAIE,cAAN,aAAE,EAAYC,iBAAiBlB,QATvB,kBAYZa,GAZY,4CAAH,sDCMPM,EAAU,SAAC,GAAkB,IAAhBd,EAAe,EAAfA,SAAe,ECHZ,SAACA,GAAa,MAGbpB,mBAAS,CAC/B2B,KAAM,GACNQ,SAAS,IAL0B,mBAGhCC,EAHgC,KAGzBC,EAHyB,KAoBvC,OAXAC,qBAAU,WAENnB,EAAOC,GACFmB,MAAK,SAAAT,GACFO,EAAS,CACLV,KAAMG,EACNK,SAAS,SAGtB,CAACf,IAEGgB,EDbuBI,CAAapB,GAA/BY,EAJyB,EAI9BL,KAAYQ,EAJkB,EAIlBA,QACnB,OACI,oCACI,sDAA4Bf,GAC1Be,GAAW,sCACb,yBAAKnB,UAAU,aAGPgB,EAAOH,KAAI,SAAAC,GAAG,OAEV,kBAAE,EAAF,eACIW,IAAKX,EAAIC,IACLD,UEhBnBY,EAAe,WAAM,MAGM1C,mBAAS,CAAC,cAHhB,mBAGvB2C,EAHuB,KAGX5C,EAHW,KAK9B,OACI,oCACI,qDACA,kBAAC,EAAD,CAAaA,cAAeA,IAC5B,6BACA,4BAIQ4C,EAAWd,KAAI,SAAAT,GAAQ,OACrB,kBAAC,EAAD,CACMqB,IAAOrB,EACPA,SAAYA,UChBxCwB,IAASC,OACL,kBAAC,EAAD,MACFC,SAASC,eAAe,U","file":"static/js/main.20f00f3c.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\n//importacion de PropTypes que permite agregar validaciones a mi componente \r\nimport PropTypes from 'prop-types'\r\n//setCategories contiene los nombres  a buscar de los gifs\r\nexport const AddCategory = ({ setCategories }) => {\r\n\r\n    //swfini state para manipular valor del input text\r\n    //valor x defecto ['One Punch']\r\n    const [inputValue, setInputValue] = useState('');\r\n\r\n    //me permite cambiar el valor de text que pasa de sde setInputValue a InputValue\r\n    const handleInputChange = (e) => {\r\n        //modifico el valor de inputValue x medio de setInputValue\r\n        setInputValue(e.target.value);\r\n    }\r\n\r\n    const handleaSubmit = (e) => {\r\n        //preventDefault evito que ocurra refrescar la pagina\r\n        e.preventDefault();\r\n        if (inputValue.trim().length > 2) {\r\n            //[inputValue,...cats] al contenido inicial cats le agrega un nuevo contenido inputvalue\r\n            setCategories(cats => [inputValue,...cats]);\r\n            setInputValue('');\r\n        }\r\n    }\r\n\r\n\r\n\r\n    return (\r\n        <form onSubmit={handleaSubmit}>\r\n            <input \r\n                type=\"text\"\r\n                value={inputValue}\r\n                onChange={handleInputChange}\r\n            />\r\n        </form>\r\n    )\r\n}\r\n\r\n//valido que s erequiera setCategories en mi compinnete junto con otras validaciones\r\nAddCategory.propTypes ={\r\n    setCategories: PropTypes.func.isRequired\r\n}","import React from 'react';\r\n\r\n//realizo una desestructuracion de images\r\n//images en {id,title}\r\nexport const GifGridItem =({title,url}) =>{\r\n   return (\r\n        <div className=\"card nimate__animated animate__bounce \">\r\n          <img src={url} alt = {title}></img>\r\n          <p> {title}</p>\r\n        </div>\r\n   )\r\n}","export  const getGis = async (category) => {\r\n    const Url = `http://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=Z0Lh5mIyOu4glSeWdRPh04jvgTSBbYPh`;\r\n    const Res = await fetch(Url);\r\n    const { data } = await Res.json();\r\n\r\n    const gifs = data.map(img => {\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url\r\n        }\r\n    })\r\n    return gifs;\r\n}\r\n","import React, { useState, useEffect } from 'react';\r\nimport { GifGridItem } from './GifGridItem';\r\nimport { getGis } from './helpers/getGis';\r\n//{useFetchGift} entre {} xq su return es explicito\r\nimport {useFetchGift} from './hooks/useFetchGift';\r\n\r\nexport const GifGrid = ({ category }) => {\r\n    //es un custom hook useFetchGift y le entrego la categoria abuscar que me retorna el arreglo de imagenes en (data)\r\n    //realizo un desestructuring (  const {data,loading} ) que tiene la estructura del objeto devuelto x useFetchGift\r\n   //renombro data por iamges (data:images)\r\n    const {data:images,loading} = useFetchGift(category);\r\n    return (\r\n        <>\r\n            <h3>categoria de busqueda: {category}</h3>\r\n            { loading && <p>Loading</p> } \r\n            <div className=\"card-grid\">\r\n                {\r\n                    //utilizo la data entregada por el custom hook que contiene la imagen a desplegar\r\n                    images.map(img => (\r\n                        //este componente muestra la imagen y el titulo\r\n                        < GifGridItem\r\n                            key={img.id}\r\n                            {...img}\r\n                        />\r\n                    ))\r\n                }\r\n            </div>\r\n        </>\r\n    )\r\n}","import { useState, useEffect } from 'react';\r\nimport { getGis } from '../helpers/getGis';\r\n//esto e sun custom hook\r\nexport const  useFetchGift = (category) => {\r\n    //defino un nuevo state con la siguiente estructura(data,loading)\r\n    //el state es la informacion que se encuentra en el useState\r\n    const [state, setState] = useState({\r\n        data: [],\r\n        loading: true\r\n    });\r\n\r\n   //se gatilla al iniciar el componente y al tener un cambio en (, [category]), es decir recibir un nuevo valor\r\n    useEffect(() => {\r\n        //getGis es una promesa a la cual le entrego la categoria y adema ejecuta el consumo al Api las promesas usan (.then)\r\n        getGis(category)\r\n            .then(img => {\r\n                setState({\r\n                    data: img,\r\n                    loading: false\r\n                })\r\n            })\r\n    }, [category])\r\n    //,[category] cuando la categoria cambia se vuelve a realizar lo de useEffect\r\n    return state;\r\n}","import React, { useState } from 'react';\r\nimport { AddCategory } from './components/AddCategory';\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\n\r\n//al exportarlo de forma directa necesito en la pagina de importacion llamarlo con {}\r\nexport const GifExpertApp = () => {\r\n\r\n    //const categories = ['One Punch','Samurai X','Dragon Ball'];\r\n    const [categories, setCategories] = useState(['One Punch'])\r\n\r\n    return (\r\n        <>\r\n            <h2>Ingrese Gifs a buscar</h2>\r\n            <AddCategory setCategories={setCategories} />\r\n            <hr />\r\n            <ol>\r\n                {\r\n                    //rrecorro el contenido de categorias ['One Punch','Samurai X','Dragon Ball'];\r\n                    //y lo asigo a GifGrid por medio del categories.map\r\n                    categories.map(category => (\r\n                      <GifGrid \r\n                            key = {category}\r\n                            category = {category}\r\n                      />\r\n                    ))\r\n                }\r\n            </ol>\r\n        </>\r\n    )\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n//lo llamo asi xq lo exporte de forma directa { GifExpertApp }\nimport { GifExpertApp } from './GifExpertApp';\n\n\nReactDOM.render(\n    <GifExpertApp />,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}